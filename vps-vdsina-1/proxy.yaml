http:
  # Add the router
  routers:
    jacred:
      entryPoints:
        - web
      priority: 2000
      service: jacred
      rule: "Host(`jacred.xyz`)"
      middlewares:
        - gzip@file
    tmdbcub:
      entryPoints:
        - web
      priority: 2000
      service: tmdbcub
      rule: "Host(`tmdb.cub.red`)"
      middlewares:
        - gzip@file
    cub:
      entryPoints:
        - web
      priority: 2000
      service: cub
      rule: "Host(`cub.red`)"
      middlewares:
        - gzip@file
    geocub:
      entryPoints:
        - web
      priority: 2000
      service: geocub
      rule: "Host(`geo.cub.red`)"
      middlewares:
        - gzip@file
    tmdbapi:
      entryPoints:
        - web
      priority: 2000
      service: tmdbapi
      rule: "Host(`api.themoviedb.org`)"
      middlewares:
        - gzip@file
    apianilibria:
      entryPoints:
        - web
      priority: 2000
      service: apianilibria
      rule: "Host(`api.anilibria.tv`)"
      middlewares:
        - gzip@file

  # Add the service
  services:
    jacred:
      loadBalancer:
        servers:
          - url: http://jacred.xyz
        passHostHeader: true
    tmdbcub:
      loadBalancer:
        servers:
          - url: http://tmdb.cub.red
        passHostHeader: true
    cub:
      loadBalancer:
        servers:
          - url: http://cub.red
        passHostHeader: true
    geocub:
      loadBalancer:
        servers:
          - url: http://geo.cub.red
        passHostHeader: true
    tmdbapi:
      loadBalancer:
        servers:
          - url: http://api.themoviedb.org
        passHostHeader: true
    apianilibria:
      loadBalancer:
        servers:
          - url: http://api.anilibria.tv
        passHostHeader: true

tcp:
  # Add the router
  routers:
    nnmclub:
      entryPoints:
        - websecure
      service: nnmclub
      rule: "HostSNI(`nnmclub.to`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    nnmstatic:
      entryPoints:
        - websecure
      service: nnmstatic
      rule: "HostSNI(`nnmstatic.win`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    cub:
      entryPoints:
        - websecure
      service: cub
      rule: "HostSNI(`cub.red`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    geocub:
      entryPoints:
        - websecure
      service: cub
      rule: "HostSNI(`geo.cub.red`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    tmdbcub:
      entryPoints:
        - websecure
      service: tmdbcub
      rule: "HostSNI(`tmdb.cub.red`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    tmdbapi:
      entryPoints:
        - websecure
      service: tmdbapi
      rule: "HostSNI(`api.themoviedb.org`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    jacred:
      entryPoints:
        - websecure
      service: jacred
      rule: "HostSNI(`jacred.xyz`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    anilibria:
      entryPoints:
        - websecure
      service: anilibria
      rule: "HostSNI(`anilibria.tv`) || HostSNI(`www.anilibria.tv`) || HostSNI(`api.anilibria.tv`)"
      # rule: "HostSNIRegexp(`^[a-z0-9-]+\\.anilibria\\.tv$`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    chatgpt:
      entryPoints:
        - websecure
      service: chatgpt
      rule: "HostSNI(`chatgpt.com`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    openai:
      entryPoints:
        - websecure
      service: openai
      rule: "HostSNI(`openai.com`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    authopenai:
      entryPoints:
        - websecure
      service: authopenai
      rule: "HostSNI(`auth.openai.com`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    oaistatic:
      entryPoints:
        - websecure
      service: oaistatic
      rule: "HostSNI(`cdn.oaistatic.com`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    4pda:
      entryPoints:
        - websecure
      service: 4pda
      rule: "HostSNI(`4pda.to`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true
    auxxxilium:
      entryPoints:
        - websecure
      service: auxxxilium
      rule: "HostSNI(`arc.auxxxilium.tech`)"
      # will route TLS requests (and ignore non tls requests)
      tls:
        passthrough: true

  # Add the service
  services:
    nnmclub:
      loadBalancer:
        servers:
          - address: "nnmclub.to:443"
    nnmstatic:
      loadBalancer:
        servers:
          - address: "nnmstatic.win:443"
    cub:
      loadBalancer:
        servers:
          - address: "cub.red:443"
    tmdbcub:
      loadBalancer:
        servers:
          - address: "tmdb.cub.red:443"
    tmdbapi:
      loadBalancer:
        servers:
          - address: "api.themoviedb.org:443"
    jacred:
      loadBalancer:
        servers:
          - address: "jacred.xyz:443"
    anilibria:
      loadBalancer:
        servers:
          - address: "anilibria.tv:443"
    chatgpt:
      loadBalancer:
        servers:
          - address: "chatgpt.com:443"
    openai:
      loadBalancer:
        servers:
          - address: "openai.com:443"
    authopenai:
      loadBalancer:
        servers:
          - address: "auth.openai.com:443"
    oaistatic:
      loadBalancer:
        servers:
          - address: "cdn.oaistatic.com:443"
    4pda:
      loadBalancer:
        servers:
          - address: "4pda.to:443"
    auxxxilium:
      loadBalancer:
        servers:
          - address: "arc.auxxxilium.tech:443"